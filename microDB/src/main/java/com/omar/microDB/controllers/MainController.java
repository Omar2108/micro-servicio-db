/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.omar.microDB.controllers;

import com.omar.microDB.bean.output.Respuesta;
import com.omar.microDB.bean.User;
import com.omar.microDB.bean.input.Input;
import com.omar.microDB.bean.output.RespuestaCalc;
import com.omar.microDB.repository.UserRepository;
import java.util.Optional;
import org.hibernate.annotations.common.util.impl.LoggerFactory;
import org.jboss.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

/**
 *
 * @author Omar Rodriguez
 * @version 1.0.0
 */
@Controller // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class MainController {

    private Logger logger = LoggerFactory.logger(MainController.class);

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    /**
     *
     * @param name
     * @param email
     * @param apellidos
     * @param cedula
     * @return
     * @throws java.lang.Exception
     */
    @PostMapping(path = "/add1") // Map ONLY POST Requests
    public @ResponseBody Respuesta addNewUser(@RequestParam(required = false) String name, @RequestParam(required = false) String email, @RequestParam(required = false) String apellidos, @RequestParam(required = false) Long cedula) throws Exception {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Respuesta respuesta = new Respuesta();

        if (name == null) {
            respuesta.setRespuesta("Error, en agregar el usuario");
            respuesta.setError("El campo nombre esta vacio");
            logger.error("El campo name no puede ser nulo");
            return respuesta;

        } else if (email == null) {
            respuesta.setRespuesta("Error, en agregar el usuario");
            respuesta.setError("El campo email esta vacio");
            logger.error("El campo email no puede ser nulo");
            return respuesta;

        } else if (apellidos == null) {
            respuesta.setRespuesta("Error, en agregar el usuario");
            respuesta.setError("El campo de los apellidos estan vacios");
            logger.error("El campo de los apellidos no pueden ser nulos");
            return respuesta;

        } else if (cedula == null) {
            respuesta.setRespuesta("Error, en agregar el usuario");
            respuesta.setError("El campo cedula esta vacio");
            logger.error("El campo cedula no puede ser nulo");
            return respuesta;
        }

        User n = new User();
        n.setName(name);

        try {
            n.setEmail(email);
        } catch (Exception e) {
            respuesta.setRespuesta("¡Erro, al agregar el usuario!");
            respuesta.setError(e.getMessage());
            return respuesta;
        }

        n.setApellidos(apellidos);
        n.setCedula(cedula);

        try {

            userRepository.save(n);

        } catch (Exception e) {
            respuesta.setRespuesta("¡Erro, al agregar el usuario!");
            respuesta.setError(e.getMessage());
            return respuesta;
        }

        respuesta.setRespuesta("¡Usuario agregado exitosamente!");

        return respuesta;

    }

    @PostMapping(value = "/add2", consumes = "application/json", produces = "application/json")
    public @ResponseBody
    User addNewUser2(@RequestBody User user) {
        logger.debug("Consultado el usuario");
        return userRepository.save(user);
    }

    @GetMapping(value = "/find", consumes = "application/json", produces = "application/json")
    public @ResponseBody
    Optional<User> getUser(@RequestBody User user) {
        logger.debug("Consultado el usuario, id:" + user.getId());
        return userRepository.findById(user.getId());
    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users

        try {
            return userRepository.findAll();

        } catch (Exception e) {

            System.out.println(e.toString());
        }
        return null;
    }

    /**
     *
     * @param input
     * @return 
     */
    @GetMapping(value = "/consultaU", consumes = "application/json", produces = "application/json")
    public @ResponseBody Respuesta MainController(@RequestBody Input input) {
        logger.debug("Consultado el usuario");
        Respuesta res = new Respuesta();
     
        //Consulto el usuario
        Optional<User> users = userRepository.findById(Integer.parseInt(input.getId_user()));
        
        if (!users.isEmpty()) {
            User user = users.get();
            res.setNombrePersona(user.getName());
        }
        //invocamos el micro calculadora
        RestTemplate restTemplate = new RestTemplate();
        String url ="http://localhost:9090/"+input.getOperacion()+"/"+input.getUno()+"/"+input.getDos();
        ResponseEntity<RespuestaCalc> respuestaCalc = restTemplate.exchange(url, HttpMethod.GET, null, new ParameterizedTypeReference<>(){});
        
        res.setNumero(Double.valueOf(respuestaCalc.getBody().getRespuesta()));
        return res;
    }

   

}
